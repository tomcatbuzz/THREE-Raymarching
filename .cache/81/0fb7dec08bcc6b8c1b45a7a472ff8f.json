{"id":"js/shader/fragment.glsl","dependencies":[{"name":"/home/tony8/projects/THREE-Raymarching/package.json","includedInParent":true,"mtime":1609027550883}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nuniform float progress;\\nuniform sampler2D texture1;\\nuniform vec4 resolution;\\nvarying vec2 vUv;\\n// varying vec3 vPosition;\\nfloat PI = 3.141592653589793238;\\nfloat sdSphere( vec3 p, float r ){\\n  return length(p)-r;\\n}\\n\\nfloat sdf(vec3 p){\\n\\treturn sdSphere(p,0.4);\\n}\\nvoid main()\\t{\\n\\tvec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\\n\\tvec3 camPos = vec3(0.,0.,2.);\\n\\tvec3 ray = normalize(vec3((vUv - vec2(0.5))*resolution.zw,-1));\\n\\n\\tvec3 rayPos = camPos;\\n\\tfloat t = 0.;\\n\\tfloat tMax = 5.;\\n\\tfor(int i=0;i<256;++i){\\n\\t\\tvec3 pos = camPos + t*ray;\\n\\t\\tfloat h = sdf(pos);\\n\\t\\tif(h<0.0001 || t>tMax) break;\\n\\t\\tt+=h;\\n\\t}\\n\\n\\tvec3 color = vec3(0.);\\n\\tif(t<tMax){\\n\\t\\tcolor = vec3(1.);\\n\\t}\\n\\t\\n\\tgl_FragColor = vec4(color,1.);\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"js/shader/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"js/shader/fragment.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"js/shader/fragment.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"js/shader/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"js/shader/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":820},"source":"js/shader/fragment.glsl","original":{"line":1,"column":0}}],"sources":{"js/shader/fragment.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nuniform float progress;\\nuniform sampler2D texture1;\\nuniform vec4 resolution;\\nvarying vec2 vUv;\\n// varying vec3 vPosition;\\nfloat PI = 3.141592653589793238;\\nfloat sdSphere( vec3 p, float r ){\\n  return length(p)-r;\\n}\\n\\nfloat sdf(vec3 p){\\n\\treturn sdSphere(p,0.4);\\n}\\nvoid main()\\t{\\n\\tvec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\\n\\tvec3 camPos = vec3(0.,0.,2.);\\n\\tvec3 ray = normalize(vec3((vUv - vec2(0.5))*resolution.zw,-1));\\n\\n\\tvec3 rayPos = camPos;\\n\\tfloat t = 0.;\\n\\tfloat tMax = 5.;\\n\\tfor(int i=0;i<256;++i){\\n\\t\\tvec3 pos = camPos + t*ray;\\n\\t\\tfloat h = sdf(pos);\\n\\t\\tif(h<0.0001 || t>tMax) break;\\n\\t\\tt+=h;\\n\\t}\\n\\n\\tvec3 color = vec3(0.);\\n\\tif(t<tMax){\\n\\t\\tcolor = vec3(1.);\\n\\t}\\n\\t\\n\\tgl_FragColor = vec4(color,1.);\\n}\";"},"lineCount":null}},"error":null,"hash":"315154321d15046708223bbe0ca3c41e","cacheData":{"env":{}}}